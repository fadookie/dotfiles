#File to store commonly useful bash config intended for use across many machines, remote servers, etc.

#vi editing mode for bash - a bit finicky but the normal mode commands are great
set -o vi 

#Use less as pager
PAGER=less

#Unix-style prompt. Show git branch in prompt if applicable. We're not using a function for su compatibility.
export PS1="[\[\033[00m\]\u@\h\[\033[01;34m\] \W \[\033[31m\]\$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/')\[\033[00m\]]$\[\033[00m\] "

# I inlined the following function into my PS1 so it would still work if I switch users, I was getting errors before
#parse_git_branch() {
#   git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
#}
#export PS1="\[\033[00m\]\u@\h:\W\[\033[31m\]\$(parse_git_branch)\[\033[00m\]$\[\033[00m\] "

#Tab-completion for sshing to machines in the ~/.ssh/known_hosts file
complete -W "$(echo `cat ~/.ssh/known_hosts | cut -f 1 -d ' ' | sed -e s/,.*//g | uniq | grep -v "\["`;)" ssh

# used to reattach ssh forwarding to "stale" tmux sessions, just type 'r' at the bash prompt.
# http://justinchouinard.com/blog/2010/04/10/fix-stale-ssh-environment-variables-in-gnu-screen-and-tmux/
function r() {   
  if [[ -n $TMUX ]]; then     
    NEW_SSH_AUTH_SOCK=`tmux showenv|grep ^SSH_AUTH_SOCK|cut -d = -f 2`
    if [[ -n $NEW_SSH_AUTH_SOCK ]] && [[ -S $NEW_SSH_AUTH_SOCK ]]; then 
      SSH_AUTH_SOCK=$NEW_SSH_AUTH_SOCK  
        echo "SSH key forwarding refreshed."
    fi   
  fi    
}
